{"version":3,"sources":["base.js"],"names":[],"mappings":"mcAcM,8BAA+B,kB,CAM/B,qDAC8B,CAK5B,oBAAqB,OAAO,OAAP,CAAe,aALR,CAW5B,mBAAoB,CAUV,QAVU,uEAUD,CAVC,CAUM,CAVN,0GAcK,EAAS,GAAT,CAAa,CAAb,CAdL,6LA4BV,QA5BU,uEA4BD,CA5BC,CA4BS,CA5BT,mHAkCO,eAAe,4BAAf,EAA6C,kBAA7C,CACP,QADO,CACE,EAAS,GADX,CACgB,CADhB,CAlCP,QAiCJ,EAAS,IAjCL,QAmCkC,IAnClC,2EAwCK,EAAS,GAAT,CAAa,CAAb,CAxCL,0MAsDV,UAtDU,uEAsDC,CAtDD,CAsDQ,CAtDR,gHA2DG,eAAe,4BAAf,EAA6C,kBAA7C,CACP,QADO,CACE,CADF,CACS,CADT,CA3DH,cA0DJ,EA1DI,QA4DuB,IA5DvB,UA+DK,EAAS,MAAT,CAAgB,CAAhB,CAAuB,CAAvB,CA/DL,6LAXQ,CAD9B,C","file":"base-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 18/11/2018.\r\n */\r\n\r\n/**\r\n * file provides the \"base\" framework/utilities required to launch the app.\r\n * E.g. - File creates the base namespace which the app is built on.\r\n * - Loads all the ES module libraries required etc\r\n *\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n **/\r\n\r\n// constant that defines the app namespace\r\nconst utopiasoftware_app_namespace = 'schools-checkout';\r\n\r\n/**\r\n * create the namespace and base methods and properties for the app\r\n * @type {{}}\r\n */\r\nconst utopiasoftware = {\r\n    [utopiasoftware_app_namespace]: {\r\n\r\n        /**\r\n         * holds the randomisation engine used by Random.Js\r\n         */\r\n        randomisationEngine: Random.engines.browserCrypto,\r\n\r\n\r\n        /**\r\n         * object is responsible for handling database operations for the app\r\n         */\r\n        databaseOperations: {\r\n\r\n            /**\r\n             * method loads the data from the specified app database\r\n             *\r\n             * @param docId {String}\r\n             * @param database {Object}\r\n             *\r\n             * @returns {Promise<void>}\r\n             */\r\n            async loadData(docId, database){\r\n\r\n                try{\r\n                    // get specified data\r\n                    return await database.get(docId);\r\n                }\r\n                finally{\r\n                }\r\n            },\r\n\r\n            /**\r\n             * method is used to save the data into the specified database\r\n             *\r\n             * @param saveData\r\n             * @param database\r\n             *\r\n             * @returns {Promise<void>}\r\n             */\r\n            async saveData(saveData, database){\r\n\r\n                try{\r\n                    try{\r\n                        // get the last _rev property that was used to save the data\r\n                        saveData._rev =\r\n                            (await utopiasoftware[utopiasoftware_app_namespace].databaseOperations.\r\n                            loadData(saveData._id, database))._rev;\r\n                    }\r\n                    catch(err){}\r\n\r\n                    // return the document data\r\n                    return await database.put(saveData);\r\n                }\r\n                finally{\r\n                }\r\n            },\r\n\r\n            /**\r\n             * method is used to remove the data with the specified docId, from the specified database\r\n             *\r\n             * @param docId\r\n             * @param database\r\n             *\r\n             * @returns {Promise<void>}\r\n             */\r\n            async removeData(docId, database){\r\n\r\n                try{\r\n                    // get the last _rev property that was used to save the data\r\n                    let docRev =\r\n                        (await utopiasoftware[utopiasoftware_app_namespace].databaseOperations.\r\n                        loadData(docId, database))._rev;\r\n\r\n                    // delete the data\r\n                    return await database.remove(docId, docRev);\r\n                }\r\n                finally{\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n};"]}